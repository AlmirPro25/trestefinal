#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Cores para console
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  cyan: '\x1b[36m'
};

// Fun√ß√£o para perguntar ao usu√°rio
function pergunta(questao) {
  return new Promise((resolve) => {
    rl.question(questao, (resposta) => {
      resolve(resposta);
    });
  });
}

// Tipos de projeto dispon√≠veis para o sistema anti-simula√ß√£o
const projetosTipoAntiSimulacao = [
  { id: 'generic', nome: 'Gen√©rico' },
  { id: 'ecommerce', nome: 'E-commerce / Loja Virtual' },
  { id: 'blog', nome: 'Blog / Site de Conte√∫do' },
  { id: 'social', nome: 'Rede Social / Comunidade' },
  { id: 'dashboard', nome: 'Painel Administrativo / Dashboard' },
  { id: 'api', nome: 'API / Servi√ßo Backend' }
];

// APIs dispon√≠veis para integra√ß√£o
const apisDisponiveis = [
  { id: 'stripe', nome: 'Stripe (Pagamentos)' },
  { id: 'cloudinary', nome: 'Cloudinary (Imagens e M√≠dia)' },
  { id: 'nodemailer', nome: 'Nodemailer (Emails)' },
  { id: 'prisma', nome: 'Prisma (ORM para Banco de Dados)' },
  { id: 'axios', nome: 'Axios (Cliente HTTP)' },
  { id: 'firebase', nome: 'Firebase (Auth, Firestore, etc)' },
  { id: 'aws-sdk', nome: 'AWS SDK (S3, Lambda, etc)' },
  { id: 'mongodb', nome: 'MongoDB (Banco de Dados)' },
  { id: 'supabase', nome: 'Supabase (Backend as a Service)' }
];

// Medidas de seguran√ßa dispon√≠veis
const medidasSeguranca = [
  { id: 'jwt', nome: 'JWT (Autentica√ß√£o)' },
  { id: 'bcrypt', nome: 'Bcrypt (Hash de Senhas)' },
  { id: 'helmet', nome: 'Helmet (Prote√ß√£o de Cabe√ßalhos HTTP)' },
  { id: 'rate-limiting', nome: 'Rate Limiting (Limita√ß√£o de Requisi√ß√µes)' },
  { id: 'csrf', nome: 'CSRF (Prote√ß√£o Cross-Site Request Forgery)' },
  { id: 'xss', nome: 'XSS (Prote√ß√£o Cross-Site Scripting)' },
  { id: 'input-validation', nome: 'Valida√ß√£o de Entrada de Dados' },
  { id: 'oauth', nome: 'OAuth (Autentica√ß√£o de Terceiros)' }
];

async function configurarProjeto() {
  console.log(`\n${colors.bright}${colors.cyan}üöÄ Iniciando configura√ß√£o autom√°tica do projeto...${colors.reset}\n`);
  
  // Perguntar tipo de projeto
  const tipoProjeto = await pergunta(
    'Qual tipo de projeto deseja configurar?\n' +
    '1. Frontend (React/Next.js)\n' +
    '2. Backend (Node.js/Express)\n' +
    '3. Fullstack (Frontend + Backend)\n' +
    'Escolha (1-3): '
  );
  
  // Perguntar nome do projeto
  const nomeProjeto = await pergunta('Nome do projeto: ');
  
  // Perguntar se deseja usar TypeScript
  const usarTypeScript = (await pergunta('Usar TypeScript? (s/n): ')).toLowerCase() === 's';
  
  // Configurar sistema anti-simula√ß√£o
  console.log(`\n${colors.bright}${colors.cyan}üõ°Ô∏è Configurando Sistema Anti-Simula√ß√£o...${colors.reset}`);
  
  // Perguntar tipo de projeto para anti-simula√ß√£o
  console.log('\nTipos de projeto dispon√≠veis para o sistema anti-simula√ß√£o:');
  projetosTipoAntiSimulacao.forEach((tipo, index) => {
    console.log(`${index + 1}. ${tipo.nome}`);
  });
  
  const tipoAntiSimulacaoIndex = parseInt(await pergunta('Escolha o tipo de projeto (1-6): ')) - 1;
  const tipoAntiSimulacao = projetosTipoAntiSimulacao[tipoAntiSimulacaoIndex] || projetosTipoAntiSimulacao[0];
  
  // Perguntar n√≠vel de rigor
  const nivelRigor = parseInt(await pergunta('N√≠vel de rigor para detec√ß√£o de simula√ß√µes (1-10, padr√£o: 8): ')) || 8;
  
  // Perguntar sobre APIs necess√°rias
  console.log('\nAPIs dispon√≠veis para integra√ß√£o:');
  apisDisponiveis.forEach((api, index) => {
    console.log(`${index + 1}. ${api.nome}`);
  });
  
  const apisEscolhidasInput = await pergunta('Digite os n√∫meros das APIs desejadas, separados por v√≠rgula (ex: 1,3,5): ');
  const apisEscolhidasIndices = apisEscolhidasInput ? apisEscolhidasInput.split(',').map(num => parseInt(num.trim()) - 1) : [];
  const apisEscolhidas = apisEscolhidasIndices
    .filter(index => !isNaN(index) && index >= 0 && index < apisDisponiveis.length)
    .map(index => apisDisponiveis[index].id);
  
  // Perguntar sobre medidas de seguran√ßa
  console.log('\nMedidas de seguran√ßa dispon√≠veis:');
  medidasSeguranca.forEach((medida, index) => {
    console.log(`${index + 1}. ${medida.nome}`);
  });
  
  const medidasEscolhidasInput = await pergunta('Digite os n√∫meros das medidas de seguran√ßa desejadas, separados por v√≠rgula (ex: 1,3,5): ');
  const medidasEscolhidasIndices = medidasEscolhidasInput ? medidasEscolhidasInput.split(',').map(num => parseInt(num.trim()) - 1) : [];
  const medidasEscolhidas = medidasEscolhidasIndices
    .filter(index => !isNaN(index) && index >= 0 && index < medidasSeguranca.length)
    .map(index => medidasSeguranca[index].id);
  
  // Perguntar sobre configura√ß√£o autom√°tica
  const configAutomatica = (await pergunta('Ativar configura√ß√£o autom√°tica? (s/n, padr√£o: s): ')).toLowerCase() !== 'n';
  
  // Configurar vari√°veis de ambiente
  console.log(`\n${colors.cyan}üìù Configurando vari√°veis de ambiente...${colors.reset}`);
  
  // Preparar configura√ß√£o do sistema anti-simula√ß√£o
  const configAntiSimulacao = {
    tipoAntiSimulacao,
    nivelRigor,
    apisEscolhidas,
    medidasEscolhidas,
    configAutomatica
  };
  
  if (tipoProjeto === '2' || tipoProjeto === '3') {
    // Configurar backend
    const portaBackend = await pergunta('Porta para o backend (padr√£o: 3001): ') || '3001';
    const urlBancoDados = await pergunta('URL do banco de dados PostgreSQL: ');
    const jwtSecret = gerarStringAleatoria(32);
    
    // Criar .env para backend
    const envBackend = `
# Configura√ß√µes do Servidor
PORT=${portaBackend}
NODE_ENV=development

# Banco de Dados
DATABASE_URL="${urlBancoDados}"

# Autentica√ß√£o
JWT_SECRET=${jwtSecret}
JWT_EXPIRES_IN=7d
REFRESH_TOKEN_SECRET=${gerarStringAleatoria(32)}
REFRESH_TOKEN_EXPIRES_IN=30d

# Stripe (Pagamentos)
STRIPE_SECRET_KEY=sk_test_...
STRIPE_PUBLIC_KEY=pk_test_...
STRIPE_WEBHOOK_SECRET=whsec_...

# Cloudinary (Upload de Imagens)
CLOUDINARY_CLOUD_NAME=seu_cloud_name
CLOUDINARY_API_KEY=sua_api_key
CLOUDINARY_API_SECRET=seu_api_secret

# Email
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USER=seu_email@gmail.com
EMAIL_PASS=sua_senha_de_app

# Google Gemini API
GEMINI_API_KEY=sua_chave_api_gemini
`;
    
    if (tipoProjeto === '2' || tipoProjeto === '3') {
      const backendDir = tipoProjeto === '3' ? './backend' : '.';
      if (tipoProjeto === '3' && !fs.existsSync(backendDir)) {
        fs.mkdirSync(backendDir, { recursive: true });
      }
      
      fs.writeFileSync(path.join(backendDir, '.env'), envBackend.trim());
      fs.writeFileSync(path.join(backendDir, '.env.example'), envBackend.trim());
      
      console.log('‚úÖ Arquivo .env do backend criado com sucesso!');
    }
  }
  
  if (tipoProjeto === '1' || tipoProjeto === '3') {
    // Configurar frontend
    const portaFrontend = await pergunta('Porta para o frontend (padr√£o: 3000): ') || '3000';
    const urlBackend = await pergunta('URL da API backend (padr√£o: http://localhost:3001/api): ') || 'http://localhost:3001/api';
    
    // Criar .env para frontend
    const envFrontend = `
# Configura√ß√µes do App
NEXT_PUBLIC_APP_NAME="${nomeProjeto}"
NEXT_PUBLIC_APP_URL=http://localhost:${portaFrontend}

# API
NEXT_PUBLIC_API_URL=${urlBackend}

# Stripe (Pagamentos)
NEXT_PUBLIC_STRIPE_PUBLIC_KEY=pk_test_...

# Google Gemini API
NEXT_PUBLIC_GEMINI_API_KEY=sua_chave_api_gemini
`;
    
    if (tipoProjeto === '1' || tipoProjeto === '3') {
      const frontendDir = tipoProjeto === '3' ? './frontend' : '.';
      if (tipoProjeto === '3' && !fs.existsSync(frontendDir)) {
        fs.mkdirSync(frontendDir, { recursive: true });
      }
      
      fs.writeFileSync(path.join(frontendDir, '.env.local'), envFrontend.trim());
      fs.writeFileSync(path.join(frontendDir, '.env.example'), envFrontend.trim());
      
      console.log('‚úÖ Arquivo .env do frontend criado com sucesso!');
    }
  }

  // Criar arquivo de configura√ß√£o para o Gemini
  console.log('\nüìù Configurando integra√ß√£o com Gemini API...');
  const geminiConfig = `
// Configura√ß√£o do Gemini API
const geminiConfig = {
  apiKey: process.env.${tipoProjeto === '1' ? 'NEXT_PUBLIC_GEMINI_API_KEY' : 'GEMINI_API_KEY'},
  models: {
    text: 'gemini-2.5-pro',
    chat: 'gemini-2.5-pro',
    vision: 'gemini-2.5-pro-vision',
    imageGeneration: 'gemini-2.0-flash-preview-image-generation'
  },
  temperature: 0.7,
  topK: 40,
  topP: 0.95,
  maxOutputTokens: 8192,
  safetySettings: [
    {
      category: 'HARM_CATEGORY_HARASSMENT',
      threshold: 'BLOCK_MEDIUM_AND_ABOVE'
    },
    {
      category: 'HARM_CATEGORY_HATE_SPEECH',
      threshold: 'BLOCK_MEDIUM_AND_ABOVE'
    },
    {
      category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
      threshold: 'BLOCK_MEDIUM_AND_ABOVE'
    },
    {
      category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
      threshold: 'BLOCK_MEDIUM_AND_ABOVE'
    }
  ]
};

module.exports = geminiConfig;
`;

  const configDir = tipoProjeto === '3' ? './backend/src/config' : './src/config';
  if (!fs.existsSync(configDir)) {
    fs.mkdirSync(configDir, { recursive: true });
  }
  fs.writeFileSync(path.join(configDir, 'gemini.config.js'), geminiConfig.trim());
  console.log('‚úÖ Arquivo de configura√ß√£o do Gemini criado com sucesso!');
  
  // Criar arquivo README com instru√ß√µes
  console.log('\nüìù Criando documenta√ß√£o do projeto...');
  const readmeContent = `
# ${nomeProjeto}

## Sobre o Projeto

Este projeto foi configurado automaticamente com integra√ß√£o completa de APIs e servi√ßos externos.

## Configura√ß√£o

### Pr√©-requisitos

- Node.js (v14 ou superior)
- NPM ou Yarn
${tipoProjeto === '2' || tipoProjeto === '3' ? '- PostgreSQL' : ''}

### Instala√ß√£o

1. Clone o reposit√≥rio
2. Instale as depend√™ncias:
   \`\`\`
   npm install
   \`\`\`
3. Configure as vari√°veis de ambiente:
   - Copie o arquivo \`.env.example\` para \`.env\`
   - Preencha todas as vari√°veis com seus valores reais

## Integra√ß√µes de APIs

Este projeto inclui integra√ß√µes completas com as seguintes APIs e servi√ßos:

### Google Gemini API

1. Acesse [Google AI Studio](https://makersuite.google.com/app/apikey)
2. Crie uma chave de API
3. Adicione a chave no arquivo \`.env\`:
   \`\`\`
   ${tipoProjeto === '1' ? 'NEXT_PUBLIC_GEMINI_API_KEY' : 'GEMINI_API_KEY'}=sua_chave_api_gemini
   \`\`\`

### Stripe (Pagamentos)

1. Crie uma conta no [Stripe](https://stripe.com)
2. No dashboard do Stripe, v√° para Developers > API keys
3. Copie a "Secret key" e a "Publishable key"
4. Adicione as chaves no arquivo \`.env\`:
   \`\`\`
   STRIPE_SECRET_KEY=sk_test_...
   STRIPE_PUBLIC_KEY=pk_test_...
   \`\`\`
5. Para configurar webhooks, v√° para Developers > Webhooks
6. Adicione um endpoint (ex: https://seusite.com/api/webhooks/stripe)
7. Selecione os eventos: payment_intent.succeeded, payment_intent.payment_failed
8. Copie o "Signing secret" e adicione ao \`.env\`:
   \`\`\`
   STRIPE_WEBHOOK_SECRET=whsec_...
   \`\`\`

### Cloudinary (Upload de Imagens)

1. Crie uma conta no [Cloudinary](https://cloudinary.com)
2. No dashboard, v√° para Settings > Access Keys
3. Copie o "Cloud name", "API Key" e "API Secret"
4. Adicione ao arquivo \`.env\`:
   \`\`\`
   CLOUDINARY_CLOUD_NAME=seu_cloud_name
   CLOUDINARY_API_KEY=sua_api_key
   CLOUDINARY_API_SECRET=seu_api_secret
   \`\`\`

### Configura√ß√£o de Email (Gmail)

1. V√° para sua conta Google > Seguran√ßa
2. Ative a verifica√ß√£o em duas etapas
3. V√° para "Senhas de app" e crie uma nova senha para o app
4. Adicione ao arquivo \`.env\`:
   \`\`\`
   EMAIL_HOST=smtp.gmail.com
   EMAIL_PORT=587
   EMAIL_USER=seu_email@gmail.com
   EMAIL_PASS=sua_senha_de_app
   \`\`\`

${tipoProjeto === '2' || tipoProjeto === '3' ? `### Banco de Dados PostgreSQL

1. Instale o PostgreSQL ou use um servi√ßo como ElephantSQL/Supabase
2. Crie um novo banco de dados
3. Adicione a URL de conex√£o ao arquivo \`.env\`:
   \`\`\`
   DATABASE_URL="postgresql://usuario:senha@localhost:5432/meuapp?schema=public"
   \`\`\`
4. Execute as migra√ß√µes: \`npx prisma migrate dev\`
5. Execute os seeds: \`npx prisma db seed\`
` : ''}
## Inicializa√ß√£o do Projeto

1. Inicie o servidor de desenvolvimento:
   \`\`\`
   npm run dev
   \`\`\`
2. Acesse o projeto em: http://localhost:${tipoProjeto === '1' || tipoProjeto === '3' ? '3000' : '3001'}

## Seguran√ßa

- Todas as senhas s√£o armazenadas com hash usando bcrypt
- Autentica√ß√£o implementada com JWT e refresh tokens
- Headers de seguran√ßa configurados com Helmet
- Rate limiting para prevenir ataques de for√ßa bruta
- Valida√ß√£o e sanitiza√ß√£o de todas as entradas de usu√°rio
- HTTPS em produ√ß√£o

## Licen√ßa

Este projeto est√° licenciado sob a licen√ßa MIT.
`;

  fs.writeFileSync('README.md', readmeContent.trim());
  console.log('‚úÖ Arquivo README.md criado com sucesso!');
  
  console.log('\nüéâ Configura√ß√£o conclu√≠da com sucesso!\n');
  console.log('Pr√≥ximos passos:');
  
  if (tipoProjeto === '2' || tipoProjeto === '3') {
    console.log('1. Configure suas chaves API reais no arquivo .env do backend');
    console.log('2. Execute npx prisma migrate dev para criar o banco de dados');
    console.log('3. Execute npx prisma db seed para popular o banco com dados iniciais');
  }
  
  if (tipoProjeto === '1' || tipoProjeto === '3') {
    console.log('1. Configure suas chaves API reais no arquivo .env.local do frontend');
  }
  
  console.log('\nObrigado por usar o configurador autom√°tico!\n');
  
  rl.close();
  
  // Retornar configura√ß√£o do sistema anti-simula√ß√£o
  return configAntiSimulacao;
}

// Fun√ß√£o para gerar string aleat√≥ria (para secrets)
function gerarStringAleatoria(tamanho) {
  const caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+-=[]{}|;:,.<>?';
  let resultado = '';
  for (let i = 0; i < tamanho; i++) {
    resultado += caracteres.charAt(Math.floor(Math.random() * caracteres.length));
  }
  return resultado;
}

// Fun√ß√£o para criar o arquivo de configura√ß√£o do sistema anti-simula√ß√£o
function criarArquivoConfigAntiSimulacao(config) {
  console.log(`\n${colors.cyan}Criando arquivo de configura√ß√£o do sistema anti-simula√ß√£o...${colors.reset}`);
  
  const configDir = path.join(process.cwd(), 'config');
  if (!fs.existsSync(configDir)) {
    fs.mkdirSync(configDir, { recursive: true });
  }
  
  const configPath = path.join(configDir, 'antiSimulationConfig.js');
  
  // Gerar conte√∫do do arquivo de configura√ß√£o
  const configContent = `/**
 * Configura√ß√£o do Sistema Anti-Simula√ß√£o
 * Gerado automaticamente pelo script de configura√ß√£o
 */

module.exports = {
  // Configura√ß√µes gerais
  enabled: true,
  projectType: '${config.tipoAntiSimulacao.id}',
  strictnessLevel: ${config.nivelRigor},
  autoRegenerate: ${config.configAutomatica},
  maxRegenerationAttempts: 3,
  minQualityScore: 85,
  
  // Detec√ß√£o de simula√ß√µes
  simulationDetection: {
    detectPlaceholders: true,
    detectIncompleteCode: true,
    detectSecuritySimulations: true,
    detectAPISimulations: true,
    customPatterns: [
      // Adicione padr√µes personalizados aqui
    ]
  },
  
  // Integra√ß√£o de APIs
  apiIntegration: {
    requiredAPIs: ${JSON.stringify(config.apisEscolhidas)},
    forceRealImplementation: true
  },
  
  // Seguran√ßa
  security: {
    requiredMeasures: ${JSON.stringify(config.medidasEscolhidas)},
    enforceSecurityBestPractices: true
  },
  
  // Qualidade de c√≥digo
  codeQuality: {
    enforceErrorHandling: true,
    enforceDataValidation: true,
    requireDocumentation: true,
    maxComplexity: 15
  },
  
  // Configura√ß√£o autom√°tica
  autoConfiguration: {
    enabled: ${config.configAutomatica},
    generateConfigFiles: true,
    setupEnvironmentVariables: true
  },
  
  // Configura√ß√µes espec√≠ficas por tipo de projeto
  projectSpecific: {
    ecommerce: {
      requiredFeatures: ['cart', 'checkout', 'products', 'users'],
      requiredAPIs: ['stripe', 'cloudinary', 'nodemailer'],
      requiredSecurity: ['jwt', 'input-validation', 'xss']
    },
    blog: {
      requiredFeatures: ['posts', 'comments', 'users'],
      requiredAPIs: ['cloudinary', 'nodemailer'],
      requiredSecurity: ['input-validation', 'xss']
    },
    social: {
      requiredFeatures: ['users', 'posts', 'comments', 'notifications'],
      requiredAPIs: ['cloudinary', 'nodemailer'],
      requiredSecurity: ['jwt', 'input-validation', 'xss']
    }
  },
  
  // Mensagens personalizadas
  messages: {
    simulationDetected: 'Simula√ß√£o detectada! O c√≥digo gerado cont√©m implementa√ß√µes simuladas que n√£o funcionariam em produ√ß√£o.',
    apiSimulationDetected: 'API simulada detectada! A integra√ß√£o com {api} n√£o est√° implementada corretamente.',
    securitySimulationDetected: 'Simula√ß√£o de seguran√ßa detectada! A implementa√ß√£o de {security} n√£o √© real ou est√° incompleta.',
    codeQualityIssue: 'Problema de qualidade de c√≥digo detectado: {issue}',
    regeneratingCode: 'Regenerando c√≥digo para corrigir simula√ß√µes...',
    configurationRequired: 'Configura√ß√£o necess√°ria: {config}'
  }
};
`;
  
  fs.writeFileSync(configPath, configContent);
  console.log(`${colors.green}‚úÖ Arquivo de configura√ß√£o criado com sucesso: ${configPath}${colors.reset}`);
}

// Executar fun√ß√£o principal
console.log('\nüì¶ Script de Configura√ß√£o Autom√°tica\n');
console.log('Este script ir√° configurar automaticamente seu projeto com todas as integra√ß√µes de APIs necess√°rias.');
console.log('Ele criar√° os arquivos .env com todas as vari√°veis de ambiente necess√°rias e um arquivo de configura√ß√£o para o Gemini API.');
console.log('\nPara come√ßar, responda √†s perguntas a seguir:\n');

configuraProjeto().then((config) => {
  // Criar arquivo de configura√ß√£o do sistema anti-simula√ß√£o
  if (config && config.tipoAntiSimulacao) {
    criarArquivoConfigAntiSimulacao(config);
  }
  
  console.log(`\n${colors.bright}${colors.green}‚ú® Configura√ß√£o conclu√≠da com sucesso!${colors.reset}\n`);
  console.log(`${colors.cyan}Para iniciar o servidor de desenvolvimento, execute:${colors.reset}`);
  console.log(`${colors.bright}npm run dev${colors.reset}\n`);
  
  rl.close();
}).catch(erro => {
  console.error(`${colors.red}‚ùå Erro durante a configura√ß√£o:${colors.reset}`, erro);
  rl.close();
});